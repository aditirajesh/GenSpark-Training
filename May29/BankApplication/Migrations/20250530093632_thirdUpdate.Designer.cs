// <auto-generated />
using System;
using BankApplication.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace BankApplication.Migrations
{
    [DbContext(typeof(BankingContext))]
    [Migration("20250530093632_thirdUpdate")]
    partial class thirdUpdate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("BankApplication.Models.Account", b =>
                {
                    b.Property<int>("AccountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("AccountId"));

                    b.Property<decimal>("Balance")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("AccountId")
                        .HasName("PK_AccountId");

                    b.HasIndex("UserId");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("BankApplication.Models.BankTransaction", b =>
                {
                    b.Property<int>("BankTransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("BankTransactionId"));

                    b.Property<decimal>("AmountTransferred")
                        .HasColumnType("numeric");

                    b.Property<int?>("ReceiverId")
                        .HasColumnType("integer");

                    b.Property<int?>("SenderId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("TransferDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("BankTransactionId")
                        .HasName("PK_BankTransaction_Id");

                    b.HasIndex("ReceiverId");

                    b.HasIndex("SenderId");

                    b.ToTable("BankTransactions");
                });

            modelBuilder.Entity("BankApplication.Models.DTOs.DepositResponseDto", b =>
                {
                    b.Property<decimal>("AmountTransferred")
                        .HasColumnType("numeric");

                    b.Property<int>("BankTransactionId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("TransferDate")
                        .HasColumnType("timestamp with time zone");

                    b.ToTable("DepositsByAccount");
                });

            modelBuilder.Entity("BankApplication.Models.DTOs.ReceivedBankTransactionResponseDto", b =>
                {
                    b.Property<decimal>("AmountTransferred")
                        .HasColumnType("numeric");

                    b.Property<int>("BankTransactionId")
                        .HasColumnType("integer");

                    b.Property<int>("SenderId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("TransferDate")
                        .HasColumnType("timestamp with time zone");

                    b.ToTable("ReceivedBankTransactionsByAccount");
                });

            modelBuilder.Entity("BankApplication.Models.DTOs.SentBankTransactionResponseDto", b =>
                {
                    b.Property<decimal>("AmountTransferred")
                        .HasColumnType("numeric");

                    b.Property<int>("BankTransactionId")
                        .HasColumnType("integer");

                    b.Property<int>("ReceiverId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("TransferDate")
                        .HasColumnType("timestamp with time zone");

                    b.ToTable("SentBankTransactionsByAccount");
                });

            modelBuilder.Entity("BankApplication.Models.DTOs.WithdrawalResponseDto", b =>
                {
                    b.Property<decimal>("AmountTransferred")
                        .HasColumnType("numeric");

                    b.Property<int>("BankTransactionId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("TransferDate")
                        .HasColumnType("timestamp with time zone");

                    b.ToTable("WithdrawalsByAccount");
                });

            modelBuilder.Entity("BankApplication.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("UserId"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("UserId")
                        .HasName("PK_UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("BankApplication.Models.Account", b =>
                {
                    b.HasOne("BankApplication.Models.User", "User")
                        .WithMany("Accounts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_Account_User");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BankApplication.Models.BankTransaction", b =>
                {
                    b.HasOne("BankApplication.Models.Account", "Receiver")
                        .WithMany("ReceivedBankTransactions")
                        .HasForeignKey("ReceiverId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_BankTransaction_ReceiverAcc");

                    b.HasOne("BankApplication.Models.Account", "Sender")
                        .WithMany("SentBankTransactions")
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_BankTransaction_SenderAcc");

                    b.Navigation("Receiver");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("BankApplication.Models.Account", b =>
                {
                    b.Navigation("ReceivedBankTransactions");

                    b.Navigation("SentBankTransactions");
                });

            modelBuilder.Entity("BankApplication.Models.User", b =>
                {
                    b.Navigation("Accounts");
                });
#pragma warning restore 612, 618
        }
    }
}
